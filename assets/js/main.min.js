"use strict";function numberWithCommas(e){return e.toString().replace(/\B(?=(\d{3})+(?!\d))/g,".")}$("#userPhone").inputmask();var swiperGreet=new Swiper("#formSwiper",{navigation:{nextEl:".swiper-pagination-btn--next",prevEl:".swiper-pagination-btn--prev"},pagination:{el:".swiper-pagination",clickable:!0},loop:!1,effect:"cube",speed:300,watchSlidesProgress:!0,watchVisibility:!0,disableOnInteraction:!0,noSwiping:!0});swiperGreet.allowTouchMove=!1,$(document).ready(function(){$("#sliderDebt").slider({range:"min",animate:!0,value:4e5,min:1e5,max:8e6,slide:function(e,t){t=numberWithCommas(t=t.value);$("#sliderDebtInput").val(t)}})}),function(t){var e,o,n,i;function u(e,t){var o,n;1<e.originalEvent.touches.length||(e.preventDefault(),o=e.originalEvent.changedTouches[0],(n=document.createEvent("MouseEvents")).initMouseEvent(t,!0,!0,window,1,o.screenX,o.screenY,o.clientX,o.clientY,!1,!1,!1,!1,0,null),e.target.dispatchEvent(n))}t.support.touch="ontouchend"in document,t.support.touch&&(e=t.ui.mouse.prototype,o=e._mouseInit,n=e._mouseDestroy,e._touchStart=function(e){!i&&this._mouseCapture(e.originalEvent.changedTouches[0])&&(i=!0,this._touchMoved=!1,u(e,"mouseover"),u(e,"mousemove"),u(e,"mousedown"))},e._touchMove=function(e){i&&(this._touchMoved=!0,u(e,"mousemove"))},e._touchEnd=function(e){i&&(u(e,"mouseup"),u(e,"mouseout"),this._touchMoved||u(e,"click"),i=!1)},e._mouseInit=function(){var e=this;e.element.bind({touchstart:t.proxy(e,"_touchStart"),touchmove:t.proxy(e,"_touchMove"),touchend:t.proxy(e,"_touchEnd")}),o.call(e)},e._mouseDestroy=function(){var e=this;e.element.unbind({touchstart:t.proxy(e,"_touchStart"),touchmove:t.proxy(e,"_touchMove"),touchend:t.proxy(e,"_touchEnd")}),n.call(e)})}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
