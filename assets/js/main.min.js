"use strict";function numberWithCommas(e){return e.toString().replace(/\B(?=(\d{3})+(?!\d))/g,".")}$("#userPhone").inputmask();var swiperGreet=new Swiper("#formSwiper",{navigation:{nextEl:".swiper-pagination-btn--next",prevEl:".swiper-pagination-btn--prev"},pagination:{el:".swiper-pagination",clickable:!0},loop:!1,effect:"cube",speed:300,watchSlidesProgress:!0,watchVisibility:!0,disableOnInteraction:!0,noSwiping:!0});function updateDatesOfInput(){var e=document.getElementById("sliderYearInput");switch(e.value.replace(" года","")){case"0":e.value="6 месяцев";break;case"1":e.value="1 год";break;case"2":e.value="2 года";break;case"3":e.value="3 года";break;case"4":e.value="4 года";break;default:e.value="".concat(e.value," лет")}}swiperGreet.allowTouchMove=!1,$(document).ready(function(){$("#sliderDebt").slider({range:"min",animate:!0,value:4e5,min:1e5,max:8e6,slide:function(e,t){t=numberWithCommas(t=t.value);$("#sliderDebtInput").val(t+" ₽")}}),$("#sliderYear").slider({range:"min",animate:!0,value:3,min:0,max:8,slide:function(e,t){t=numberWithCommas(t=t.value);$("#sliderYearInput").val(t),updateDatesOfInput()}}),$("#sliderInvest").slider({range:"min",animate:!0,value:0,min:0,max:.8*$("#sliderDebt").slider("option","value"),slide:function(e,t){t=numberWithCommas(t=t.value);$("#sliderInvestInput").val(t+" ₽");t=.8*$("#sliderDebt").slider("option","value");console.log(t),$("#sliderInvest").slider("option","max",t)}}),$("#sliderDebtUncertain").slider({range:"min",animate:!0,value:4e5,min:1e5,max:8e6,slide:function(e,t){t=numberWithCommas(t=t.value);$("#sliderDebtUncertainInput").val(t+" ₽")}}),$("#sliderYearUncertain").slider({range:"min",animate:!0,value:3,min:0,max:8,slide:function(e,t){t=numberWithCommas(t=t.value);$("#sliderYearInput").val(t),updateDatesOfInput()}})});var userNameInput=document.getElementById("userName"),userPhoneInput=document.getElementById("userPhone");$(document).ready(function(){$(".form-layout__submit").addClass("button--disabled"),$("#userName").keyup(function(){0!=$(this).val().length&&0!=$("#userPhone").val().length&&$(".form-layout__submit").removeClass("button--disabled")}),$("#userPhone").keyup(function(){0!=$(this).val().length&&0!=$("#userName").val().length&&$(".form-layout__submit").removeClass("button--disabled")})});var buttonSubmit=document.getElementById("applyformSubmit");function hasNumber(e){return/\d/.test(e)}buttonSubmit.addEventListener("click",function(e){hasNumber(document.getElementById("userName").value)?(document.getElementById("userName").classList.add("input-warning"),buttonSubmit.classList.add("button--disabled"),e.preventDefault()):window.location.href="http://localhost:3000/ThankYou.html"}),document.getElementById("formApply").addEventListener("submit",function(e){buttonSubmit.removeEventListener("click"),window.location.href="http://localhost:3000/ThankYou.html"}),function(t){var e,n,o,u;function a(e,t){var n,o;1<e.originalEvent.touches.length||(e.preventDefault(),n=e.originalEvent.changedTouches[0],(o=document.createEvent("MouseEvents")).initMouseEvent(t,!0,!0,window,1,n.screenX,n.screenY,n.clientX,n.clientY,!1,!1,!1,!1,0,null),e.target.dispatchEvent(o))}t.support.touch="ontouchend"in document,t.support.touch&&(e=t.ui.mouse.prototype,n=e._mouseInit,o=e._mouseDestroy,e._touchStart=function(e){!u&&this._mouseCapture(e.originalEvent.changedTouches[0])&&(u=!0,this._touchMoved=!1,a(e,"mouseover"),a(e,"mousemove"),a(e,"mousedown"))},e._touchMove=function(e){u&&(this._touchMoved=!0,a(e,"mousemove"))},e._touchEnd=function(e){u&&(a(e,"mouseup"),a(e,"mouseout"),this._touchMoved||a(e,"click"),u=!1)},e._mouseInit=function(){var e=this;e.element.bind({touchstart:t.proxy(e,"_touchStart"),touchmove:t.proxy(e,"_touchMove"),touchend:t.proxy(e,"_touchEnd")}),n.call(e)},e._mouseDestroy=function(){var e=this;e.element.unbind({touchstart:t.proxy(e,"_touchStart"),touchmove:t.proxy(e,"_touchMove"),touchend:t.proxy(e,"_touchEnd")}),o.call(e)})}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbW1vbi5qcyJdLCJuYW1lcyI6WyJudW1iZXJXaXRoQ29tbWFzIiwieCIsInRvU3RyaW5nIiwicmVwbGFjZSIsIiQiLCJpbnB1dG1hc2siLCJzd2lwZXJHcmVldCIsIlN3aXBlciIsIm5hdmlnYXRpb24iLCJuZXh0RWwiLCJwcmV2RWwiLCJwYWdpbmF0aW9uIiwiZWwiLCJjbGlja2FibGUiLCJsb29wIiwiZWZmZWN0Iiwic3BlZWQiLCJ3YXRjaFNsaWRlc1Byb2dyZXNzIiwid2F0Y2hWaXNpYmlsaXR5IiwiZGlzYWJsZU9uSW50ZXJhY3Rpb24iLCJub1N3aXBpbmciLCJ1cGRhdGVEYXRlc09mSW5wdXQiLCJ5ZWFySW5wdXQiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwidmFsdWUiLCJjb25jYXQiLCJhbGxvd1RvdWNoTW92ZSIsInJlYWR5Iiwic2xpZGVyIiwicmFuZ2UiLCJhbmltYXRlIiwibWluIiwibWF4Iiwic2xpZGUiLCJldmVudCIsInVpIiwiZGVidFZhbHVlIiwidmFsIiwiZGVidFZhbHVlTWF4IiwiY29uc29sZSIsImxvZyIsInVzZXJOYW1lSW5wdXQiLCJ1c2VyUGhvbmVJbnB1dCIsImFkZENsYXNzIiwia2V5dXAiLCJ0aGlzIiwibGVuZ3RoIiwicmVtb3ZlQ2xhc3MiLCJidXR0b25TdWJtaXQiLCJoYXNOdW1iZXIiLCJteVN0cmluZyIsInRlc3QiLCJhZGRFdmVudExpc3RlbmVyIiwiY2xhc3NMaXN0IiwiYWRkIiwicHJldmVudERlZmF1bHQiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsImhyZWYiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwibW91c2VQcm90byIsIl9tb3VzZUluaXQiLCJfbW91c2VEZXN0cm95IiwidG91Y2hIYW5kbGVkIiwic2ltdWxhdGVNb3VzZUV2ZW50Iiwic2ltdWxhdGVkVHlwZSIsInRvdWNoIiwic2ltdWxhdGVkRXZlbnQiLCJvcmlnaW5hbEV2ZW50IiwidG91Y2hlcyIsImNoYW5nZWRUb3VjaGVzIiwiY3JlYXRlRXZlbnQiLCJpbml0TW91c2VFdmVudCIsInNjcmVlblgiLCJzY3JlZW5ZIiwiY2xpZW50WCIsImNsaWVudFkiLCJ0YXJnZXQiLCJkaXNwYXRjaEV2ZW50Iiwic3VwcG9ydCIsIm1vdXNlIiwicHJvdG90eXBlIiwiX3RvdWNoU3RhcnQiLCJfbW91c2VDYXB0dXJlIiwiX3RvdWNoTW92ZWQiLCJfdG91Y2hNb3ZlIiwiX3RvdWNoRW5kIiwic2VsZiIsImVsZW1lbnQiLCJiaW5kIiwidG91Y2hzdGFydCIsInByb3h5IiwidG91Y2htb3ZlIiwidG91Y2hlbmQiLCJjYWxsIiwidW5iaW5kIiwialF1ZXJ5Il0sIm1hcHBpbmdzIjoiYUFBQSxTQUFBQSxpQkFBQUMsR0FDQSxPQUFBQSxFQUFBQyxXQUFBQyxRQUFBLHdCQUFBLEtBRUFDLEVBQUEsY0FBQUMsWUFDQSxJQUFBQyxZQUFBLElBQUFDLE9BQUEsY0FBQSxDQUNBQyxXQUFBLENBQ0FDLE9BQUEsK0JBQ0FDLE9BQUEsZ0NBRUFDLFdBQUEsQ0FDQUMsR0FBQSxxQkFDQUMsV0FBQSxHQUVBQyxNQUFBLEVBQ0FDLE9BQUEsT0FDQUMsTUFBQSxJQUNBQyxxQkFBQSxFQUNBQyxpQkFBQSxFQUNBQyxzQkFBQSxFQUNBQyxXQUFBLElBME9BLFNBQUFDLHFCQUNBLElBQUFDLEVBQUFDLFNBQUFDLGVBQUEsbUJBR0EsT0FGQUYsRUFBQUcsTUFDQXRCLFFBQUEsUUFBQSxLQUVBLElBQUEsSUFDQW1CLEVBQUFHLE1BQUEsWUFDQSxNQUVBLElBQUEsSUFDQUgsRUFBQUcsTUFBQSxRQUNBLE1BRUEsSUFBQSxJQUNBSCxFQUFBRyxNQUFBLFNBQ0EsTUFFQSxJQUFBLElBQ0FILEVBQUFHLE1BQUEsU0FDQSxNQUVBLElBQUEsSUFDQUgsRUFBQUcsTUFBQSxTQUNBLE1BRUEsUUFDQUgsRUFBQUcsTUFBQSxHQUFBQyxPQUFBSixFQUFBRyxNQUFBLFNBbFFBbkIsWUFBQXFCLGdCQUFBLEVBQ0F2QixFQUFBbUIsVUFBQUssTUFBQSxXQWNBeEIsRUFBQSxlQUFBeUIsT0FBQSxDQUNBQyxNQUFBLE1BQ0FDLFNBQUEsRUFDQU4sTUFBQSxJQUNBTyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsTUFBQSxTQUFBQyxFQUFBQyxHQUVBQyxFQUFBckMsaUJBREFxQyxFQUFBRCxFQUFBWCxPQUVBckIsRUFBQSxvQkFBQWtDLElBQUFELEVBQUEsU0FzQ0FqQyxFQUFBLGVBQUF5QixPQUFBLENBQ0FDLE1BQUEsTUFDQUMsU0FBQSxFQUNBTixNQUFBLEVBQ0FPLElBQUEsRUFDQUMsSUFBQSxFQUNBQyxNQUFBLFNBQUFDLEVBQUFDLEdBRUFDLEVBQUFyQyxpQkFEQXFDLEVBQUFELEVBQUFYLE9BRUFyQixFQUFBLG9CQUFBa0MsSUFBQUQsR0FDQWhCLHdCQUdBakIsRUFBQSxpQkFBQXlCLE9BQUEsQ0FDQUMsTUFBQSxNQUNBQyxTQUFBLEVBQ0FOLE1BQUEsRUFDQU8sSUFBQSxFQUNBQyxJQUFBLEdBQUE3QixFQUFBLGVBQUF5QixPQUFBLFNBQUEsU0FDQUssTUFBQSxTQUFBQyxFQUFBQyxHQUVBQyxFQUFBckMsaUJBREFxQyxFQUFBRCxFQUFBWCxPQUVBckIsRUFBQSxzQkFBQWtDLElBQUFELEVBQUEsTUFDQUUsRUFBQSxHQUFBbkMsRUFBQSxlQUFBeUIsT0FBQSxTQUFBLFNBQ0FXLFFBQUFDLElBQUFGLEdBQ0FuQyxFQUFBLGlCQUFBeUIsT0FBQSxTQUFBLE1BQUFVLE1BR0FuQyxFQUFBLHdCQUFBeUIsT0FBQSxDQUNBQyxNQUFBLE1BQ0FDLFNBQUEsRUFDQU4sTUFBQSxJQUNBTyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsTUFBQSxTQUFBQyxFQUFBQyxHQUVBQyxFQUFBckMsaUJBREFxQyxFQUFBRCxFQUFBWCxPQUVBckIsRUFBQSw2QkFBQWtDLElBQUFELEVBQUEsU0FHQWpDLEVBQUEsd0JBQUF5QixPQUFBLENBQ0FDLE1BQUEsTUFDQUMsU0FBQSxFQUNBTixNQUFBLEVBQ0FPLElBQUEsRUFDQUMsSUFBQSxFQUNBQyxNQUFBLFNBQUFDLEVBQUFDLEdBRUFDLEVBQUFyQyxpQkFEQXFDLEVBQUFELEVBQUFYLE9BRUFyQixFQUFBLG9CQUFBa0MsSUFBQUQsR0FDQWhCLDBCQXNKQSxJQUFBcUIsY0FBQW5CLFNBQUFDLGVBQUEsWUFDQW1CLGVBQUFwQixTQUFBQyxlQUFBLGFBQ0FwQixFQUFBbUIsVUFBQUssTUFBQSxXQUNBeEIsRUFBQSx3QkFBQXdDLFNBQUEsb0JBQ0F4QyxFQUFBLGFBQUF5QyxNQUFBLFdBQ0EsR0FBQXpDLEVBQUEwQyxNQUFBUixNQUFBUyxRQUFBLEdBQUEzQyxFQUFBLGNBQUFrQyxNQUFBUyxRQUNBM0MsRUFBQSx3QkFBQTRDLFlBQUEsc0JBR0E1QyxFQUFBLGNBQUF5QyxNQUFBLFdBQ0EsR0FBQXpDLEVBQUEwQyxNQUFBUixNQUFBUyxRQUFBLEdBQUEzQyxFQUFBLGFBQUFrQyxNQUFBUyxRQUNBM0MsRUFBQSx3QkFBQTRDLFlBQUEsd0JBZUEsSUFBQUMsYUFBQTFCLFNBQUFDLGVBQUEsbUJBZ0JBLFNBQUEwQixVQUFBQyxHQUNBLE1BQUEsS0FBQUMsS0FBQUQsR0FoQkFGLGFBQUFJLGlCQUFBLFFBQUEsU0FBQWxCLEdBQ0FlLFVBQUEzQixTQUFBQyxlQUFBLFlBQUFDLFFBQ0FGLFNBQUFDLGVBQUEsWUFBQThCLFVBQUFDLElBQUEsaUJBQ0FOLGFBQUFLLFVBQUFDLElBQUEsb0JBQ0FwQixFQUFBcUIsa0JBRUFDLE9BQUFDLFNBQUFDLEtBQUEsd0NBSUFwQyxTQUFBQyxlQUFBLGFBQUE2QixpQkFBQSxTQUFBLFNBQUFsQixHQUNBYyxhQUFBVyxvQkFBQSxTQUNBSCxPQUFBQyxTQUFBQyxLQUFBLHdDQWlCQSxTQUFBdkQsR0FLQSxJQUlBeUQsRUFDQUMsRUFDQUMsRUFDQUMsRUFPQSxTQUFBQyxFQUFBOUIsRUFBQStCLEdBRUEsSUFNQUMsRUFDQUMsRUFQQSxFQUFBakMsRUFBQWtDLGNBQUFDLFFBQUF2QixTQUlBWixFQUFBcUIsaUJBRUFXLEVBQUFoQyxFQUFBa0MsY0FBQUUsZUFBQSxJQUNBSCxFQUFBN0MsU0FBQWlELFlBQUEsZ0JBR0FDLGVBQ0FQLEdBQ0EsR0FDQSxFQUNBVCxPQUNBLEVBQ0FVLEVBQUFPLFFBQ0FQLEVBQUFRLFFBQ0FSLEVBQUFTLFFBQ0FULEVBQUFVLFNBQ0EsR0FDQSxHQUNBLEdBQ0EsRUFDQSxFQUNBLE1BSUExQyxFQUFBMkMsT0FBQUMsY0FBQVgsSUFoREFoRSxFQUFBNEUsUUFBQWIsTUFBQSxlQUFBNUMsU0FHQW5CLEVBQUE0RSxRQUFBYixRQUlBTixFQUFBekQsRUFBQWdDLEdBQUE2QyxNQUFBQyxVQUNBcEIsRUFBQUQsRUFBQUMsV0FDQUMsRUFBQUYsRUFBQUUsY0E4Q0FGLEVBQUFzQixZQUFBLFNBQUFoRCxJQUtBNkIsR0FKQWxCLEtBS0FzQyxjQUFBakQsRUFBQWtDLGNBQUFFLGVBQUEsTUFNQVAsR0FBQSxFQVhBbEIsS0FjQXVDLGFBQUEsRUFHQXBCLEVBQUE5QixFQUFBLGFBR0E4QixFQUFBOUIsRUFBQSxhQUdBOEIsRUFBQTlCLEVBQUEsZUFPQTBCLEVBQUF5QixXQUFBLFNBQUFuRCxHQUVBNkIsSUFLQWxCLEtBQUF1QyxhQUFBLEVBR0FwQixFQUFBOUIsRUFBQSxlQU9BMEIsRUFBQTBCLFVBQUEsU0FBQXBELEdBRUE2QixJQUtBQyxFQUFBOUIsRUFBQSxXQUdBOEIsRUFBQTlCLEVBQUEsWUFHQVcsS0FBQXVDLGFBRUFwQixFQUFBOUIsRUFBQSxTQUlBNkIsR0FBQSxJQVNBSCxFQUFBQyxXQUFBLFdBQ0EsSUFBQTBCLEVBQUExQyxLQUdBMEMsRUFBQUMsUUFBQUMsS0FBQSxDQUNBQyxXQUFBdkYsRUFBQXdGLE1BQUFKLEVBQUEsZUFDQUssVUFBQXpGLEVBQUF3RixNQUFBSixFQUFBLGNBQ0FNLFNBQUExRixFQUFBd0YsTUFBQUosRUFBQSxlQUlBMUIsRUFBQWlDLEtBQUFQLElBTUEzQixFQUFBRSxjQUFBLFdBQ0EsSUFBQXlCLEVBQUExQyxLQUdBMEMsRUFBQUMsUUFBQU8sT0FBQSxDQUNBTCxXQUFBdkYsRUFBQXdGLE1BQUFKLEVBQUEsZUFDQUssVUFBQXpGLEVBQUF3RixNQUFBSixFQUFBLGNBQ0FNLFNBQUExRixFQUFBd0YsTUFBQUosRUFBQSxlQUlBekIsRUFBQWdDLEtBQUFQLEtBaktBLENBbUtBUyIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gbnVtYmVyV2l0aENvbW1hcyh4KSB7XG4gICAgcmV0dXJuIHgudG9TdHJpbmcoKS5yZXBsYWNlKC9cXEIoPz0oXFxkezN9KSsoPyFcXGQpKS9nLCBcIi5cIik7XG59XG4kKFwiI3VzZXJQaG9uZVwiKS5pbnB1dG1hc2soKTtcbmxldCBzd2lwZXJHcmVldCA9IG5ldyBTd2lwZXIoXCIjZm9ybVN3aXBlclwiLCB7XG4gICAgbmF2aWdhdGlvbjoge1xuICAgICAgICBuZXh0RWw6IFwiLnN3aXBlci1wYWdpbmF0aW9uLWJ0bi0tbmV4dFwiLFxuICAgICAgICBwcmV2RWw6IFwiLnN3aXBlci1wYWdpbmF0aW9uLWJ0bi0tcHJldlwiLFxuICAgIH0sXG4gICAgcGFnaW5hdGlvbjoge1xuICAgICAgICBlbDogXCIuc3dpcGVyLXBhZ2luYXRpb25cIixcbiAgICAgICAgY2xpY2thYmxlOiB0cnVlLFxuICAgIH0sXG4gICAgbG9vcDogZmFsc2UsXG4gICAgZWZmZWN0OiBcImN1YmVcIixcbiAgICBzcGVlZDogMzAwLFxuICAgIHdhdGNoU2xpZGVzUHJvZ3Jlc3M6IHRydWUsXG4gICAgd2F0Y2hWaXNpYmlsaXR5OiB0cnVlLFxuICAgIGRpc2FibGVPbkludGVyYWN0aW9uOiB0cnVlLFxuICAgIG5vU3dpcGluZzogdHJ1ZSxcbn0pO1xuc3dpcGVyR3JlZXQuYWxsb3dUb3VjaE1vdmUgPSBmYWxzZTtcbiQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkge1xuICAgIC8vICQoXCIjZm9ybVNsaWRlckRlYnRcIikuc2xpZGVyKHtcbiAgICAvLyAgICAgcmFuZ2U6IFwibWluXCIsXG4gICAgLy8gICAgIGFuaW1hdGU6IHRydWUsXG4gICAgLy8gICAgIHZhbHVlOiA1MDAwMDAsXG4gICAgLy8gICAgIG1pbjogMTAwMDAwLFxuICAgIC8vICAgICBtYXg6IDQzNTAwMDAsXG4gICAgLy8gICAgIHN0ZXA6IDEwMDAsXG4gICAgLy8gICAgIHNsaWRlOiBmdW5jdGlvbihldmVudCwgdWkpIHtcbiAgICAvLyAgICAgICAgIGxldCBkZWJ0VmFsdWUgPSB1aS52YWx1ZTtcbiAgICAvLyAgICAgICAgIGRlYnRWYWx1ZSA9IG51bWJlcldpdGhDb21tYXMoZGVidFZhbHVlKTtcbiAgICAvLyAgICAgICAgICQoXCIjZGVidElucHV0XCIpLnZhbChkZWJ0VmFsdWUpO1xuICAgIC8vICAgICB9LFxuICAgIC8vIH0pO1xuICAgICQoXCIjc2xpZGVyRGVidFwiKS5zbGlkZXIoe1xuICAgICAgICByYW5nZTogXCJtaW5cIixcbiAgICAgICAgYW5pbWF0ZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IDQwMDAwMCxcbiAgICAgICAgbWluOiAxMDAwMDAsXG4gICAgICAgIG1heDogODAwMDAwMCxcbiAgICAgICAgc2xpZGU6IGZ1bmN0aW9uKGV2ZW50LCB1aSkge1xuICAgICAgICAgICAgbGV0IGRlYnRWYWx1ZSA9IHVpLnZhbHVlO1xuICAgICAgICAgICAgZGVidFZhbHVlID0gbnVtYmVyV2l0aENvbW1hcyhkZWJ0VmFsdWUpO1xuICAgICAgICAgICAgJChcIiNzbGlkZXJEZWJ0SW5wdXRcIikudmFsKGRlYnRWYWx1ZSArIFwiIOKCvVwiKTtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gc2xpZGU6IGZ1bmN0aW9uKGV2ZW50LCB1aSkge1xuICAgICAgICAvLyAgICAgbGV0IGRlYnRNb25leSA9ICQoXCIjc2xpZGVyRGVidFwiKS5zbGlkZXIoXCJ2YWx1ZVwiKTtcbiAgICAgICAgLy8gICAgIGxldCBkZWJ0RGVwb3NpdCA9ICQoXCIjc2xpZGVyRGVwb3NpdFwiKS5zbGlkZXIoXCJ2YWx1ZVwiKTtcbiAgICAgICAgLy8gICAgIGNvbnN0IGRlYnRUaW1lUmFkaW9zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5jb250cm9sbGVyLWlucHV0XCIpO1xuICAgICAgICAvLyAgICAgbGV0IG9iamVjdERlYnRUaW1lID0gWy4uLmRlYnRUaW1lUmFkaW9zXS5maWx0ZXIoKHJhZGlvKSA9PiB7XG4gICAgICAgIC8vICAgICAgICAgaWYgKHJhZGlvLmNoZWNrZWQpIHtcbiAgICAgICAgLy8gICAgICAgICAgICAgcmV0dXJuIHJhZGlvO1xuICAgICAgICAvLyAgICAgICAgIH1cbiAgICAgICAgLy8gICAgIH0pO1xuICAgICAgICAvLyAgICAgbGV0IGRlYnRUaW1lID0gb2JqZWN0RGVidFRpbWVbMF0uaWQ7XG4gICAgICAgIC8vICAgICBsZXQgdXBkYXRlZERlYnRUaW1lID0gZGVidFRpbWUucmVwbGFjZShcIm1vbnRoXCIsIFwiXCIpO1xuICAgICAgICAvLyAgICAgc3dpdGNoICh1cGRhdGVkRGVidFRpbWUpIHtcbiAgICAgICAgLy8gICAgICAgICBjYXNlIFwiMDVcIjpcbiAgICAgICAgLy8gICAgICAgICAgICAgdXBkYXRlZERlYnRUaW1lID0gMC41O1xuICAgICAgICAvLyAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgLy8gICAgIH1cbiAgICAgICAgLy8gICAgIGxldCBjb2VmaWNpZW50ID0gMy45IC8gMTIwMC4wO1xuICAgICAgICAvLyAgICAgdXBkYXRlZERlYnRUaW1lID0gcGFyc2VJbnQodXBkYXRlZERlYnRUaW1lKTtcbiAgICAgICAgLy8gICAgIGRlYnRNb25leSA9IHBhcnNlSW50KGRlYnRNb25leSk7XG4gICAgICAgIC8vICAgICBkZWJ0RGVwb3NpdCA9IHBhcnNlSW50KGRlYnREZXBvc2l0KTtcbiAgICAgICAgLy8gICAgIGRlYnRNb25leSAtPSBkZWJ0RGVwb3NpdDtcbiAgICAgICAgLy8gICAgIGxldCBtb250aFBheW1lbnQgPVxuICAgICAgICAvLyAgICAgICAgIGRlYnRNb25leSAqXG4gICAgICAgIC8vICAgICAgICAgY29lZmljaWVudCAqXG4gICAgICAgIC8vICAgICAgICAgTWF0aC5mbG9vcihcbiAgICAgICAgLy8gICAgICAgICAgICAgTWF0aC5wb3coMSArIGNvZWZpY2llbnQsIHVwZGF0ZWREZWJ0VGltZSkgL1xuICAgICAgICAvLyAgICAgICAgICAgICAoTWF0aC5wb3coMSArIGNvZWZpY2llbnQsIHVwZGF0ZWREZWJ0VGltZSkgLSAxKVxuICAgICAgICAvLyAgICAgICAgICk7XG4gICAgICAgIC8vICAgICAkO1xuICAgICAgICAvLyAgICAgJChcIiNkZXBvc2l0SGFsZlwiKS50ZXh0KE1hdGguZmxvb3IoKGRlYnRNb25leSAqIDAuOCkgLyAyKSk7XG4gICAgICAgIC8vICAgICAkKFwiI2RlcG9zaXRNYXhcIikudGV4dChNYXRoLmZsb29yKGRlYnRNb25leSAqIDAuOCkpO1xuICAgICAgICAvLyAgICAgbGV0IHVwZGF0ZWRNYXhWYWx1ZSA9IHBhcnNlSW50KCQoXCIjZGVwb3NpdE1heFwiKS50ZXh0KCkpO1xuICAgICAgICAvLyAgICAgJChcIiNzbGlkZXJEZXBvc2l0XCIpLnNsaWRlcihcIm9wdGlvblwiLCBcIm1heFwiLCB1cGRhdGVkTWF4VmFsdWUpO1xuICAgICAgICAvLyAgICAgJChcIiNpbnRlcmVzdFJlc3VsdFwiKS50ZXh0KE1hdGguZmxvb3IobW9udGhQYXltZW50KSArIFwiIOKCvVwiKTtcbiAgICAgICAgLy8gfSxcbiAgICB9KTtcbiAgICAkKFwiI3NsaWRlclllYXJcIikuc2xpZGVyKHtcbiAgICAgICAgcmFuZ2U6IFwibWluXCIsXG4gICAgICAgIGFuaW1hdGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiAzLFxuICAgICAgICBtaW46IDAsXG4gICAgICAgIG1heDogOCxcbiAgICAgICAgc2xpZGU6IGZ1bmN0aW9uKGV2ZW50LCB1aSkge1xuICAgICAgICAgICAgbGV0IGRlYnRWYWx1ZSA9IHVpLnZhbHVlO1xuICAgICAgICAgICAgZGVidFZhbHVlID0gbnVtYmVyV2l0aENvbW1hcyhkZWJ0VmFsdWUpO1xuICAgICAgICAgICAgJChcIiNzbGlkZXJZZWFySW5wdXRcIikudmFsKGRlYnRWYWx1ZSk7XG4gICAgICAgICAgICB1cGRhdGVEYXRlc09mSW5wdXQoKTtcbiAgICAgICAgfSxcbiAgICB9KTtcbiAgICAkKFwiI3NsaWRlckludmVzdFwiKS5zbGlkZXIoe1xuICAgICAgICByYW5nZTogXCJtaW5cIixcbiAgICAgICAgYW5pbWF0ZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IDAsXG4gICAgICAgIG1pbjogMCxcbiAgICAgICAgbWF4OiAkKFwiI3NsaWRlckRlYnRcIikuc2xpZGVyKFwib3B0aW9uXCIsIFwidmFsdWVcIikgKiAwLjgsXG4gICAgICAgIHNsaWRlOiBmdW5jdGlvbihldmVudCwgdWkpIHtcbiAgICAgICAgICAgIGxldCBkZWJ0VmFsdWUgPSB1aS52YWx1ZTtcbiAgICAgICAgICAgIGRlYnRWYWx1ZSA9IG51bWJlcldpdGhDb21tYXMoZGVidFZhbHVlKTtcbiAgICAgICAgICAgICQoXCIjc2xpZGVySW52ZXN0SW5wdXRcIikudmFsKGRlYnRWYWx1ZSArIFwiIOKCvVwiKTtcbiAgICAgICAgICAgIGxldCBkZWJ0VmFsdWVNYXggPSAkKFwiI3NsaWRlckRlYnRcIikuc2xpZGVyKFwib3B0aW9uXCIsIFwidmFsdWVcIikgKiAwLjg7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhkZWJ0VmFsdWVNYXgpO1xuICAgICAgICAgICAgJChcIiNzbGlkZXJJbnZlc3RcIikuc2xpZGVyKFwib3B0aW9uXCIsIFwibWF4XCIsIGRlYnRWYWx1ZU1heCk7XG4gICAgICAgIH0sXG4gICAgfSk7XG4gICAgJChcIiNzbGlkZXJEZWJ0VW5jZXJ0YWluXCIpLnNsaWRlcih7XG4gICAgICAgIHJhbmdlOiBcIm1pblwiLFxuICAgICAgICBhbmltYXRlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogNDAwMDAwLFxuICAgICAgICBtaW46IDEwMDAwMCxcbiAgICAgICAgbWF4OiA4MDAwMDAwLFxuICAgICAgICBzbGlkZTogZnVuY3Rpb24oZXZlbnQsIHVpKSB7XG4gICAgICAgICAgICBsZXQgZGVidFZhbHVlID0gdWkudmFsdWU7XG4gICAgICAgICAgICBkZWJ0VmFsdWUgPSBudW1iZXJXaXRoQ29tbWFzKGRlYnRWYWx1ZSk7XG4gICAgICAgICAgICAkKFwiI3NsaWRlckRlYnRVbmNlcnRhaW5JbnB1dFwiKS52YWwoZGVidFZhbHVlICsgXCIg4oK9XCIpO1xuICAgICAgICB9LFxuICAgIH0pO1xuICAgICQoXCIjc2xpZGVyWWVhclVuY2VydGFpblwiKS5zbGlkZXIoe1xuICAgICAgICByYW5nZTogXCJtaW5cIixcbiAgICAgICAgYW5pbWF0ZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IDMsXG4gICAgICAgIG1pbjogMCxcbiAgICAgICAgbWF4OiA4LFxuICAgICAgICBzbGlkZTogZnVuY3Rpb24oZXZlbnQsIHVpKSB7XG4gICAgICAgICAgICBsZXQgZGVidFZhbHVlID0gdWkudmFsdWU7XG4gICAgICAgICAgICBkZWJ0VmFsdWUgPSBudW1iZXJXaXRoQ29tbWFzKGRlYnRWYWx1ZSk7XG4gICAgICAgICAgICAkKFwiI3NsaWRlclllYXJJbnB1dFwiKS52YWwoZGVidFZhbHVlKTtcbiAgICAgICAgICAgIHVwZGF0ZURhdGVzT2ZJbnB1dCgpO1xuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgLy8gJChcIiNzbGlkZXJEZXBvc2l0XCIpLnNsaWRlcih7XG4gICAgLy8gICAgIHJhbmdlOiBcIm1pblwiLFxuICAgIC8vICAgICBhbmltYXRlOiB0cnVlLFxuICAgIC8vICAgICB2YWx1ZTogNDAwMDAsXG4gICAgLy8gICAgIG1pbjogMCxcbiAgICAvLyAgICAgbWF4OiA4MDAwMCxcbiAgICAvLyAgICAgc2xpZGU6IGZ1bmN0aW9uKGV2ZW50LCB1aSkge1xuICAgIC8vICAgICAgICAgbGV0IGRlYnRNb25leSA9ICQoXCIjc2xpZGVyRGVidFwiKS5zbGlkZXIoXCJ2YWx1ZVwiKTtcbiAgICAvLyAgICAgICAgIGxldCBkZWJ0RGVwb3NpdCA9ICQoXCIjc2xpZGVyRGVwb3NpdFwiKS5zbGlkZXIoXCJ2YWx1ZVwiKTtcbiAgICAvLyAgICAgICAgIGNvbnN0IGRlYnRUaW1lUmFkaW9zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5jb250cm9sbGVyLWlucHV0XCIpO1xuICAgIC8vICAgICAgICAgbGV0IG9iamVjdERlYnRUaW1lID0gWy4uLmRlYnRUaW1lUmFkaW9zXS5maWx0ZXIoKHJhZGlvKSA9PiB7XG4gICAgLy8gICAgICAgICAgICAgaWYgKHJhZGlvLmNoZWNrZWQpIHtcbiAgICAvLyAgICAgICAgICAgICAgICAgcmV0dXJuIHJhZGlvO1xuICAgIC8vICAgICAgICAgICAgIH1cbiAgICAvLyAgICAgICAgIH0pO1xuICAgIC8vICAgICAgICAgbGV0IGRlYnRUaW1lID0gb2JqZWN0RGVidFRpbWVbMF0uaWQ7XG4gICAgLy8gICAgICAgICBsZXQgdXBkYXRlZERlYnRUaW1lID0gZGVidFRpbWUucmVwbGFjZShcIm1vbnRoXCIsIFwiXCIpO1xuICAgIC8vICAgICAgICAgc3dpdGNoICh1cGRhdGVkRGVidFRpbWUpIHtcbiAgICAvLyAgICAgICAgICAgICBjYXNlIFwiMDVcIjpcbiAgICAvLyAgICAgICAgICAgICAgICAgdXBkYXRlZERlYnRUaW1lID0gMC41O1xuICAgIC8vICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAvLyAgICAgICAgIH1cbiAgICAvLyAgICAgICAgIGxldCBjb2VmaWNpZW50ID0gMy45IC8gMTIwMC4wO1xuICAgIC8vICAgICAgICAgdXBkYXRlZERlYnRUaW1lID0gcGFyc2VJbnQodXBkYXRlZERlYnRUaW1lKTtcbiAgICAvLyAgICAgICAgIGRlYnRNb25leSA9IHBhcnNlSW50KGRlYnRNb25leSk7XG4gICAgLy8gICAgICAgICBkZWJ0RGVwb3NpdCA9IHBhcnNlSW50KGRlYnREZXBvc2l0KTtcbiAgICAvLyAgICAgICAgIGRlYnRNb25leSAtPSBkZWJ0RGVwb3NpdDtcbiAgICAvLyAgICAgICAgIGxldCBtb250aFBheW1lbnQgPSBNYXRoLmZsb29yKFxuICAgIC8vICAgICAgICAgICAgIGRlYnRNb25leSAqXG4gICAgLy8gICAgICAgICAgICAgY29lZmljaWVudCAqXG4gICAgLy8gICAgICAgICAgICAgKE1hdGgucG93KDEgKyBjb2VmaWNpZW50LCB1cGRhdGVkRGVidFRpbWUpIC9cbiAgICAvLyAgICAgICAgICAgICAgICAgKE1hdGgucG93KDEgKyBjb2VmaWNpZW50LCB1cGRhdGVkRGVidFRpbWUpIC0gMSkpXG4gICAgLy8gICAgICAgICApO1xuXG4gICAgLy8gICAgICAgICAkKFwiI2ludGVyZXN0UmVzdWx0XCIpLnRleHQoTWF0aC5mbG9vcihtb250aFBheW1lbnQpICsgXCIg4oK9XCIpO1xuICAgIC8vICAgICAgICAgLy8gdmFyIGsgPSAzLjkgLyAxMjAwLjA7XG4gICAgLy8gICAgICAgICAvLyBzdW0gPSBwcmljZSAqIGsgKiAoTWF0aC5wb3coMSArIGssIHNyb2spIC8gKE1hdGgucG93KDEgKyBrLCBzcm9rKSAtIDEpKTtcbiAgICAvLyAgICAgfSxcbiAgICAvLyB9KTtcbiAgICAvLyAkKFwiI2RlYnRJbnB1dFwiKS52YWwoJChcIiNzbGlkZXJEZWJ0XCIpLnNsaWRlcihcIm9wdGlvblwiLCBcInZhbHVlXCIpKTtcbiAgICAvLyAkKFwiI2RlYnRJbnB1dFwiKS5jaGFuZ2UoZnVuY3Rpb24oKSB7XG4gICAgLy8gICAgICQoXCIjZm9ybVNsaWRlckRlYnRcIikuc2xpZGVyKFwidmFsdWVcIiwgJCh0aGlzKS52YWwoKSk7XG4gICAgLy8gfSk7XG4gICAgLy8gJChcIiNmb3JtU2xpZGVyVGltZVwiKS5zbGlkZXIoe1xuICAgIC8vICAgICByYW5nZTogXCJtaW5cIixcbiAgICAvLyAgICAgYW5pbWF0ZTogdHJ1ZSxcbiAgICAvLyAgICAgdmFsdWU6IDMsXG4gICAgLy8gICAgIG1pbjogMSxcbiAgICAvLyAgICAgbWF4OiA4LFxuICAgIC8vICAgICBzdGVwOiAxLFxuICAgIC8vICAgICBzbGlkZTogZnVuY3Rpb24oZXZlbnQsIHVpKSB7XG4gICAgLy8gICAgICAgICBsZXQgdGltZVZhbHVlID0gdWkudmFsdWU7XG4gICAgLy8gICAgICAgICBzd2l0Y2ggKHRpbWVWYWx1ZSkge1xuICAgIC8vICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAvLyAgICAgICAgICAgICAgICAgdGltZVZhbHVlID0gYCR7dGltZVZhbHVlfSDQs9C+0LRgO1xuICAgIC8vICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAvLyAgICAgICAgICAgICBjYXNlIDI6XG4gICAgLy8gICAgICAgICAgICAgICAgIHRpbWVWYWx1ZSA9IGAke3RpbWVWYWx1ZX0g0LPQvtC00LBgO1xuICAgIC8vICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAvLyAgICAgICAgICAgICBjYXNlIDM6XG4gICAgLy8gICAgICAgICAgICAgICAgIHRpbWVWYWx1ZSA9IGAke3RpbWVWYWx1ZX0g0LPQvtC00LBgO1xuICAgIC8vICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAvLyAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgLy8gICAgICAgICAgICAgICAgIHRpbWVWYWx1ZSA9IGAke3RpbWVWYWx1ZX0g0LPQvtC00LBgO1xuICAgIC8vICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAvLyAgICAgICAgICAgICBkZWZhdWx0OlxuICAgIC8vICAgICAgICAgICAgICAgICB0aW1lVmFsdWUgPSBgJHt0aW1lVmFsdWV9INC70LXRgmA7XG4gICAgLy8gICAgICAgICB9XG4gICAgLy8gICAgICAgICAkKFwiI3RpbWVJbnB1dFwiKS52YWwodGltZVZhbHVlKTtcbiAgICAvLyAgICAgfSxcbiAgICAvLyB9KTtcbiAgICAvLyAkKFwiI3RpbWVJbnB1dFwiKS52YWwoJChcIiNmb3JtU2xpZGVyVGltZVwiKS5zbGlkZXIoXCJvcHRpb25cIiwgXCJ2YWx1ZVwiKSk7XG4gICAgLy8gbGV0IHRpbWVWYWx1ZSA9ICQoXCIjdGltZUlucHV0XCIpLnZhbCgpO1xuICAgIC8vIHN3aXRjaCAodGltZVZhbHVlKSB7XG4gICAgLy8gICAgIGRlZmF1bHQ6IHRpbWVWYWx1ZSA9IGAke3RpbWVWYWx1ZX0g0LPQvtC00LBgO1xuICAgIC8vIH1cbiAgICAvLyAkKFwiI3RpbWVJbnB1dFwiKS52YWwodGltZVZhbHVlKTtcbiAgICAvLyAkKFwiI3RpbWVJbnB1dFwiKS5jaGFuZ2UoZnVuY3Rpb24oKSB7XG4gICAgLy8gICAgICQoXCIjZm9ybVNsaWRlclRpbWVcIikuc2xpZGVyKFwidmFsdWVcIiwgJCh0aGlzKS52YWwoKSk7XG4gICAgLy8gfSk7XG4gICAgLy8gJChcIiNmb3JtU2xpZGVySW52ZXN0XCIpLnNsaWRlcih7XG4gICAgLy8gICAgIHJhbmdlOiBcIm1pblwiLFxuICAgIC8vICAgICBhbmltYXRlOiB0cnVlLFxuICAgIC8vICAgICB2YWx1ZTogMzAwMDAsXG4gICAgLy8gICAgIG1pbjogMTAwMDAsXG4gICAgLy8gICAgIG1heDogNTAwMDAwLFxuICAgIC8vICAgICBzdGVwOiA1MDAwLFxuICAgIC8vICAgICBzbGlkZTogZnVuY3Rpb24oZXZlbnQsIHVpKSB7XG4gICAgLy8gICAgICAgICBsZXQgZGVidFZhbHVlID0gdWkudmFsdWU7XG4gICAgLy8gICAgICAgICBkZWJ0VmFsdWUgPSBudW1iZXJXaXRoQ29tbWFzKGRlYnRWYWx1ZSk7XG4gICAgLy8gICAgICAgICAkKFwiI2luY29tZUlucHV0XCIpLnZhbChkZWJ0VmFsdWUpO1xuICAgIC8vICAgICB9LFxuICAgIC8vIH0pO1xuICAgIC8vICQoXCIjaW5jb21lSW5wdXRcIikudmFsKCQoXCIjZm9ybVNsaWRlckludmVzdFwiKS5zbGlkZXIoXCJvcHRpb25cIiwgXCJ2YWx1ZVwiKSk7XG4gICAgLy8gJChcIiNpbmNvbWVJbnB1dFwiKS5jaGFuZ2UoZnVuY3Rpb24oKSB7XG4gICAgLy8gICAgICQoXCIjZm9ybVNsaWRlckludmVzdFwiKS5zbGlkZXIoXCJ2YWx1ZVwiLCAkKHRoaXMpLnZhbCgpKTtcbiAgICAvLyB9KTtcbiAgICAvLyAkKFwiI2Zvcm1TbGlkZXJJbnZlc3RcIikuc2xpZGVyKHtcbiAgICAvLyAgICAgcmFuZ2U6IFwibWluXCIsXG4gICAgLy8gICAgIGFuaW1hdGU6IHRydWUsXG4gICAgLy8gICAgIHZhbHVlOiAxMDAwMDAsXG4gICAgLy8gICAgIG1pbjogMCxcbiAgICAvLyAgICAgbWF4OiA0MDAwMDAsXG4gICAgLy8gICAgIHN0ZXA6IDEwMDAsXG4gICAgLy8gICAgIHNsaWRlOiBmdW5jdGlvbihldmVudCwgdWkpIHtcbiAgICAvLyAgICAgICAgIGxldCBkZWJ0VmFsdWUgPSB1aS52YWx1ZTtcbiAgICAvLyAgICAgICAgIGRlYnRWYWx1ZSA9IG51bWJlcldpdGhDb21tYXMoZGVidFZhbHVlKTtcbiAgICAvLyAgICAgICAgICQoXCIjaW52ZXN0SW5wdXRcIikudmFsKGRlYnRWYWx1ZSk7XG4gICAgLy8gICAgIH0sXG4gICAgLy8gfSk7XG4gICAgLy8gJChcIiNpbnZlc3RJbnB1dFwiKS52YWwoJChcIiNmb3JtU2xpZGVySW52ZXN0XCIpLnNsaWRlcihcIm9wdGlvblwiLCBcInZhbHVlXCIpKTtcbiAgICAvLyAkKFwiI2ludmVzdElucHV0XCIpLmNoYW5nZShmdW5jdGlvbigpIHtcbiAgICAvLyAgICAgJChcIiNmb3JtU2xpZGVySW52ZXN0XCIpLnNsaWRlcihcInZhbHVlXCIsICQodGhpcykudmFsKCkpO1xuICAgIC8vIH0pO1xufSk7XG5cbmZ1bmN0aW9uIHVwZGF0ZURhdGVzT2ZJbnB1dCgpIHtcbiAgICBsZXQgeWVhcklucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzbGlkZXJZZWFySW5wdXRcIik7XG4gICAgbGV0IHVwZGF0ZWRZZWFyID0geWVhcklucHV0LnZhbHVlO1xuICAgIHVwZGF0ZWRZZWFyID0gdXBkYXRlZFllYXIucmVwbGFjZShcIiDQs9C+0LTQsFwiLCBcIlwiKTtcbiAgICBzd2l0Y2ggKHVwZGF0ZWRZZWFyKSB7XG4gICAgICAgIGNhc2UgXCIwXCI6XG4gICAgICAgICAgICB5ZWFySW5wdXQudmFsdWUgPSBcIjYg0LzQtdGB0Y/RhtC10LJcIjtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgXCIxXCI6XG4gICAgICAgICAgICB5ZWFySW5wdXQudmFsdWUgPSBcIjEg0LPQvtC0XCI7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFwiMlwiOlxuICAgICAgICAgICAgeWVhcklucHV0LnZhbHVlID0gXCIyINCz0L7QtNCwXCI7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFwiM1wiOlxuICAgICAgICAgICAgeWVhcklucHV0LnZhbHVlID0gXCIzINCz0L7QtNCwXCI7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFwiNFwiOlxuICAgICAgICAgICAgeWVhcklucHV0LnZhbHVlID0gXCI0INCz0L7QtNCwXCI7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgeWVhcklucHV0LnZhbHVlID0gYCR7eWVhcklucHV0LnZhbHVlfSDQu9C10YJgO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxufVxuY29uc3QgdXNlck5hbWVJbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidXNlck5hbWVcIik7XG5jb25zdCB1c2VyUGhvbmVJbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidXNlclBob25lXCIpO1xuJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7XG4gICAgJChcIi5mb3JtLWxheW91dF9fc3VibWl0XCIpLmFkZENsYXNzKFwiYnV0dG9uLS1kaXNhYmxlZFwiKTtcbiAgICAkKFwiI3VzZXJOYW1lXCIpLmtleXVwKGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoJCh0aGlzKS52YWwoKS5sZW5ndGggIT0gMCAmJiAkKFwiI3VzZXJQaG9uZVwiKS52YWwoKS5sZW5ndGggIT0gMCkge1xuICAgICAgICAgICAgJChcIi5mb3JtLWxheW91dF9fc3VibWl0XCIpLnJlbW92ZUNsYXNzKFwiYnV0dG9uLS1kaXNhYmxlZFwiKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgICQoXCIjdXNlclBob25lXCIpLmtleXVwKGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoJCh0aGlzKS52YWwoKS5sZW5ndGggIT0gMCAmJiAkKFwiI3VzZXJOYW1lXCIpLnZhbCgpLmxlbmd0aCAhPSAwKSB7XG4gICAgICAgICAgICAkKFwiLmZvcm0tbGF5b3V0X19zdWJtaXRcIikucmVtb3ZlQ2xhc3MoXCJidXR0b24tLWRpc2FibGVkXCIpO1xuICAgICAgICB9XG4gICAgfSk7XG59KTtcblxuLy8gJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7XG4vLyAgICAgJChcIiNmb3JtQXBwbHlcIikuc3VibWl0KGZ1bmN0aW9uKCkge1xuLy8gICAgICAgICBpZiAoIWhhc051bWJlcigkKFwiI3VzZXJOYW1lXCIpLnZhbCgpKSkge1xuLy8gICAgICAgICAgICAgJChcIiN1c2VyTmFtZVwiKS5hZGRDbGFzcyhcImlucHV0LXdhcm5pbmdcIik7XG4vLyAgICAgICAgICAgICAkKFwiLmZvcm0tbGF5b3V0X19zdWJtaXRcIikuYWRkQ2xhc3MoXCJidXR0b24tLWRpc2FibGVkXCIpO1xuLy8gICAgICAgICAgICAgY29uc29sZS5sb2coXCJBZGRlZFwiKTtcbi8vICAgICAgICAgfVxuLy8gICAgIH0pO1xuLy8gfSk7XG5cbmxldCBidXR0b25TdWJtaXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFwcGx5Zm9ybVN1Ym1pdFwiKTtcbmJ1dHRvblN1Ym1pdC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGV2ZW50KSA9PiB7XG4gICAgaWYgKGhhc051bWJlcihkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInVzZXJOYW1lXCIpLnZhbHVlKSkge1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInVzZXJOYW1lXCIpLmNsYXNzTGlzdC5hZGQoXCJpbnB1dC13YXJuaW5nXCIpO1xuICAgICAgICBidXR0b25TdWJtaXQuY2xhc3NMaXN0LmFkZChcImJ1dHRvbi0tZGlzYWJsZWRcIik7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBcImh0dHA6Ly9sb2NhbGhvc3Q6MzAwMC9UaGFua1lvdS5odG1sXCI7XG4gICAgfVxufSk7XG5cbmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZm9ybUFwcGx5XCIpLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgKGV2ZW50KSA9PiB7XG4gICAgYnV0dG9uU3VibWl0LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbGlja1wiKTtcbiAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IFwiaHR0cDovL2xvY2FsaG9zdDozMDAwL1RoYW5rWW91Lmh0bWxcIjtcbn0pO1xuXG5mdW5jdGlvbiBoYXNOdW1iZXIobXlTdHJpbmcpIHtcbiAgICByZXR1cm4gL1xcZC8udGVzdChteVN0cmluZyk7XG59XG4vLyBKUVVFUlkgVE9VQ0ggUEFUQ0hcbi8qIVxuICogalF1ZXJ5IFVJIFRvdWNoIFB1bmNoIDAuMi4zXG4gKlxuICogQ29weXJpZ2h0IDIwMTHigJMyMDE0LCBEYXZlIEZ1cmZlcm9cbiAqIER1YWwgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBvciBHUEwgVmVyc2lvbiAyIGxpY2Vuc2VzLlxuICpcbiAqIERlcGVuZHM6XG4gKiAganF1ZXJ5LnVpLndpZGdldC5qc1xuICogIGpxdWVyeS51aS5tb3VzZS5qc1xuICovXG4oZnVuY3Rpb24oJCkge1xuICAgIC8vIERldGVjdCB0b3VjaCBzdXBwb3J0XG4gICAgJC5zdXBwb3J0LnRvdWNoID0gXCJvbnRvdWNoZW5kXCIgaW4gZG9jdW1lbnQ7XG5cbiAgICAvLyBJZ25vcmUgYnJvd3NlcnMgd2l0aG91dCB0b3VjaCBzdXBwb3J0XG4gICAgaWYgKCEkLnN1cHBvcnQudG91Y2gpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBtb3VzZVByb3RvID0gJC51aS5tb3VzZS5wcm90b3R5cGUsXG4gICAgICAgIF9tb3VzZUluaXQgPSBtb3VzZVByb3RvLl9tb3VzZUluaXQsXG4gICAgICAgIF9tb3VzZURlc3Ryb3kgPSBtb3VzZVByb3RvLl9tb3VzZURlc3Ryb3ksXG4gICAgICAgIHRvdWNoSGFuZGxlZDtcblxuICAgIC8qKlxuICAgICAqIFNpbXVsYXRlIGEgbW91c2UgZXZlbnQgYmFzZWQgb24gYSBjb3JyZXNwb25kaW5nIHRvdWNoIGV2ZW50XG4gICAgICogQHBhcmFtIHtPYmplY3R9IGV2ZW50IEEgdG91Y2ggZXZlbnRcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gc2ltdWxhdGVkVHlwZSBUaGUgY29ycmVzcG9uZGluZyBtb3VzZSBldmVudFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNpbXVsYXRlTW91c2VFdmVudChldmVudCwgc2ltdWxhdGVkVHlwZSkge1xuICAgICAgICAvLyBJZ25vcmUgbXVsdGktdG91Y2ggZXZlbnRzXG4gICAgICAgIGlmIChldmVudC5vcmlnaW5hbEV2ZW50LnRvdWNoZXMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICB2YXIgdG91Y2ggPSBldmVudC5vcmlnaW5hbEV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdLFxuICAgICAgICAgICAgc2ltdWxhdGVkRXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudChcIk1vdXNlRXZlbnRzXCIpO1xuXG4gICAgICAgIC8vIEluaXRpYWxpemUgdGhlIHNpbXVsYXRlZCBtb3VzZSBldmVudCB1c2luZyB0aGUgdG91Y2ggZXZlbnQncyBjb29yZGluYXRlc1xuICAgICAgICBzaW11bGF0ZWRFdmVudC5pbml0TW91c2VFdmVudChcbiAgICAgICAgICAgIHNpbXVsYXRlZFR5cGUsIC8vIHR5cGVcbiAgICAgICAgICAgIHRydWUsIC8vIGJ1YmJsZXNcbiAgICAgICAgICAgIHRydWUsIC8vIGNhbmNlbGFibGVcbiAgICAgICAgICAgIHdpbmRvdywgLy8gdmlld1xuICAgICAgICAgICAgMSwgLy8gZGV0YWlsXG4gICAgICAgICAgICB0b3VjaC5zY3JlZW5YLCAvLyBzY3JlZW5YXG4gICAgICAgICAgICB0b3VjaC5zY3JlZW5ZLCAvLyBzY3JlZW5ZXG4gICAgICAgICAgICB0b3VjaC5jbGllbnRYLCAvLyBjbGllbnRYXG4gICAgICAgICAgICB0b3VjaC5jbGllbnRZLCAvLyBjbGllbnRZXG4gICAgICAgICAgICBmYWxzZSwgLy8gY3RybEtleVxuICAgICAgICAgICAgZmFsc2UsIC8vIGFsdEtleVxuICAgICAgICAgICAgZmFsc2UsIC8vIHNoaWZ0S2V5XG4gICAgICAgICAgICBmYWxzZSwgLy8gbWV0YUtleVxuICAgICAgICAgICAgMCwgLy8gYnV0dG9uXG4gICAgICAgICAgICBudWxsIC8vIHJlbGF0ZWRUYXJnZXRcbiAgICAgICAgKTtcblxuICAgICAgICAvLyBEaXNwYXRjaCB0aGUgc2ltdWxhdGVkIGV2ZW50IHRvIHRoZSB0YXJnZXQgZWxlbWVudFxuICAgICAgICBldmVudC50YXJnZXQuZGlzcGF0Y2hFdmVudChzaW11bGF0ZWRFdmVudCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSGFuZGxlIHRoZSBqUXVlcnkgVUkgd2lkZ2V0J3MgdG91Y2hzdGFydCBldmVudHNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZXZlbnQgVGhlIHdpZGdldCBlbGVtZW50J3MgdG91Y2hzdGFydCBldmVudFxuICAgICAqL1xuICAgIG1vdXNlUHJvdG8uX3RvdWNoU3RhcnQgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgLy8gSWdub3JlIHRoZSBldmVudCBpZiBhbm90aGVyIHdpZGdldCBpcyBhbHJlYWR5IGJlaW5nIGhhbmRsZWRcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgdG91Y2hIYW5kbGVkIHx8XG4gICAgICAgICAgICAhc2VsZi5fbW91c2VDYXB0dXJlKGV2ZW50Lm9yaWdpbmFsRXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0pXG4gICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2V0IHRoZSBmbGFnIHRvIHByZXZlbnQgb3RoZXIgd2lkZ2V0cyBmcm9tIGluaGVyaXRpbmcgdGhlIHRvdWNoIGV2ZW50XG4gICAgICAgIHRvdWNoSGFuZGxlZCA9IHRydWU7XG5cbiAgICAgICAgLy8gVHJhY2sgbW92ZW1lbnQgdG8gZGV0ZXJtaW5lIGlmIGludGVyYWN0aW9uIHdhcyBhIGNsaWNrXG4gICAgICAgIHNlbGYuX3RvdWNoTW92ZWQgPSBmYWxzZTtcblxuICAgICAgICAvLyBTaW11bGF0ZSB0aGUgbW91c2VvdmVyIGV2ZW50XG4gICAgICAgIHNpbXVsYXRlTW91c2VFdmVudChldmVudCwgXCJtb3VzZW92ZXJcIik7XG5cbiAgICAgICAgLy8gU2ltdWxhdGUgdGhlIG1vdXNlbW92ZSBldmVudFxuICAgICAgICBzaW11bGF0ZU1vdXNlRXZlbnQoZXZlbnQsIFwibW91c2Vtb3ZlXCIpO1xuXG4gICAgICAgIC8vIFNpbXVsYXRlIHRoZSBtb3VzZWRvd24gZXZlbnRcbiAgICAgICAgc2ltdWxhdGVNb3VzZUV2ZW50KGV2ZW50LCBcIm1vdXNlZG93blwiKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogSGFuZGxlIHRoZSBqUXVlcnkgVUkgd2lkZ2V0J3MgdG91Y2htb3ZlIGV2ZW50c1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBldmVudCBUaGUgZG9jdW1lbnQncyB0b3VjaG1vdmUgZXZlbnRcbiAgICAgKi9cbiAgICBtb3VzZVByb3RvLl90b3VjaE1vdmUgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAvLyBJZ25vcmUgZXZlbnQgaWYgbm90IGhhbmRsZWRcbiAgICAgICAgaWYgKCF0b3VjaEhhbmRsZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEludGVyYWN0aW9uIHdhcyBub3QgYSBjbGlja1xuICAgICAgICB0aGlzLl90b3VjaE1vdmVkID0gdHJ1ZTtcblxuICAgICAgICAvLyBTaW11bGF0ZSB0aGUgbW91c2Vtb3ZlIGV2ZW50XG4gICAgICAgIHNpbXVsYXRlTW91c2VFdmVudChldmVudCwgXCJtb3VzZW1vdmVcIik7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEhhbmRsZSB0aGUgalF1ZXJ5IFVJIHdpZGdldCdzIHRvdWNoZW5kIGV2ZW50c1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBldmVudCBUaGUgZG9jdW1lbnQncyB0b3VjaGVuZCBldmVudFxuICAgICAqL1xuICAgIG1vdXNlUHJvdG8uX3RvdWNoRW5kID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgLy8gSWdub3JlIGV2ZW50IGlmIG5vdCBoYW5kbGVkXG4gICAgICAgIGlmICghdG91Y2hIYW5kbGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTaW11bGF0ZSB0aGUgbW91c2V1cCBldmVudFxuICAgICAgICBzaW11bGF0ZU1vdXNlRXZlbnQoZXZlbnQsIFwibW91c2V1cFwiKTtcblxuICAgICAgICAvLyBTaW11bGF0ZSB0aGUgbW91c2VvdXQgZXZlbnRcbiAgICAgICAgc2ltdWxhdGVNb3VzZUV2ZW50KGV2ZW50LCBcIm1vdXNlb3V0XCIpO1xuXG4gICAgICAgIC8vIElmIHRoZSB0b3VjaCBpbnRlcmFjdGlvbiBkaWQgbm90IG1vdmUsIGl0IHNob3VsZCB0cmlnZ2VyIGEgY2xpY2tcbiAgICAgICAgaWYgKCF0aGlzLl90b3VjaE1vdmVkKSB7XG4gICAgICAgICAgICAvLyBTaW11bGF0ZSB0aGUgY2xpY2sgZXZlbnRcbiAgICAgICAgICAgIHNpbXVsYXRlTW91c2VFdmVudChldmVudCwgXCJjbGlja1wiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVuc2V0IHRoZSBmbGFnIHRvIGFsbG93IG90aGVyIHdpZGdldHMgdG8gaW5oZXJpdCB0aGUgdG91Y2ggZXZlbnRcbiAgICAgICAgdG91Y2hIYW5kbGVkID0gZmFsc2U7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEEgZHVjayBwdW5jaCBvZiB0aGUgJC51aS5tb3VzZSBfbW91c2VJbml0IG1ldGhvZCB0byBzdXBwb3J0IHRvdWNoIGV2ZW50cy5cbiAgICAgKiBUaGlzIG1ldGhvZCBleHRlbmRzIHRoZSB3aWRnZXQgd2l0aCBib3VuZCB0b3VjaCBldmVudCBoYW5kbGVycyB0aGF0XG4gICAgICogdHJhbnNsYXRlIHRvdWNoIGV2ZW50cyB0byBtb3VzZSBldmVudHMgYW5kIHBhc3MgdGhlbSB0byB0aGUgd2lkZ2V0J3NcbiAgICAgKiBvcmlnaW5hbCBtb3VzZSBldmVudCBoYW5kbGluZyBtZXRob2RzLlxuICAgICAqL1xuICAgIG1vdXNlUHJvdG8uX21vdXNlSW5pdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgLy8gRGVsZWdhdGUgdGhlIHRvdWNoIGhhbmRsZXJzIHRvIHRoZSB3aWRnZXQncyBlbGVtZW50XG4gICAgICAgIHNlbGYuZWxlbWVudC5iaW5kKHtcbiAgICAgICAgICAgIHRvdWNoc3RhcnQ6ICQucHJveHkoc2VsZiwgXCJfdG91Y2hTdGFydFwiKSxcbiAgICAgICAgICAgIHRvdWNobW92ZTogJC5wcm94eShzZWxmLCBcIl90b3VjaE1vdmVcIiksXG4gICAgICAgICAgICB0b3VjaGVuZDogJC5wcm94eShzZWxmLCBcIl90b3VjaEVuZFwiKSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gQ2FsbCB0aGUgb3JpZ2luYWwgJC51aS5tb3VzZSBpbml0IG1ldGhvZFxuICAgICAgICBfbW91c2VJbml0LmNhbGwoc2VsZik7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSB0aGUgdG91Y2ggZXZlbnQgaGFuZGxlcnNcbiAgICAgKi9cbiAgICBtb3VzZVByb3RvLl9tb3VzZURlc3Ryb3kgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgICAgIC8vIERlbGVnYXRlIHRoZSB0b3VjaCBoYW5kbGVycyB0byB0aGUgd2lkZ2V0J3MgZWxlbWVudFxuICAgICAgICBzZWxmLmVsZW1lbnQudW5iaW5kKHtcbiAgICAgICAgICAgIHRvdWNoc3RhcnQ6ICQucHJveHkoc2VsZiwgXCJfdG91Y2hTdGFydFwiKSxcbiAgICAgICAgICAgIHRvdWNobW92ZTogJC5wcm94eShzZWxmLCBcIl90b3VjaE1vdmVcIiksXG4gICAgICAgICAgICB0b3VjaGVuZDogJC5wcm94eShzZWxmLCBcIl90b3VjaEVuZFwiKSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gQ2FsbCB0aGUgb3JpZ2luYWwgJC51aS5tb3VzZSBkZXN0cm95IG1ldGhvZFxuICAgICAgICBfbW91c2VEZXN0cm95LmNhbGwoc2VsZik7XG4gICAgfTtcbn0pKGpRdWVyeSk7Il19
